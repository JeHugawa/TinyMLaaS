# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/installing.ipynb.

# %% auto 0
__all__ = ['ArduinoNano33BLE_Installer']

# %% ../nbs/installing.ipynb 1
import subprocess
import shutil
import json

# %% ../nbs/installing.ipynb 2
class ArduinoNano33BLE_Installer:
    def __convert_model_to_arduino(self, model_path : str):
        "Copies model.cc file to arduino directory and appends necessary include and const to the start of the file."
        with open("arduino/template/person_detect_model_data.cpp", "w") as model_file:
            model_file.write("#include \"person_detect_model_data.h\"\n")
            with open(f"{model_path}/model.cc") as model_data:
                model_file.write(model_data.read())
            
    def compile(self, model_path : str):
        "Compiles arduino sketch in docker, using model file at `model_path` in local filesystem"
        self.__convert_model_to_arduino(model_path)
        subprocess.run(['docker build -t nano33ble arduino'], shell=True)

    def upload(self, port:str):
        "Uploads compiled sketch in docker"
        cmd = f"docker run --privileged nano33ble upload -p {port} --fqbn arduino:mbed_nano:nano33ble template"
        subprocess.run([cmd], shell=True)

    def list_ports(self):
        "Returns a list of ports of connected devices"
        ports = []
        cmd_output = subprocess.run(['docker run --privileged nano33ble board list --format=json'], shell=True,capture_output=True).stdout
        result = json.loads(cmd_output.decode("ascii"))
        for row in result:
            ports.append(row["port"]["address"])
        return ports
